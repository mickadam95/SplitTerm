#include "settingsdialog.h"
#include "ui_settingsdialog.h" // This file is generated by Qt Designer
#include <QColorDialog>
#include <QDebug>

SettingsDialog::SettingsDialog(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::SettingsDialog),
    m_settings("MyCompany", "SplitTerm") // Matches main.cpp
{
    ui->setupUi(this);

    // --- IMPORTANT ---
    // This assumes you created a settingsdialog.ui file (see description below)
    // and named your 8 buttons: colorButton_30, colorButton_31, ... colorButton_37

    // Link buttons to their settings key
    m_buttonKeyMap.insert(ui->colorButton_30, "ansi/30");
    m_buttonKeyMap.insert(ui->colorButton_31, "ansi/31");
    m_buttonKeyMap.insert(ui->colorButton_32, "ansi/32");
    m_buttonKeyMap.insert(ui->colorButton_33, "ansi/33");
    m_buttonKeyMap.insert(ui->colorButton_34, "ansi/34");
    m_buttonKeyMap.insert(ui->colorButton_35, "ansi/35");
    m_buttonKeyMap.insert(ui->colorButton_36, "ansi/36");
    m_buttonKeyMap.insert(ui->colorButton_37, "ansi/37");

    // Connect all buttons to our single slot
    for(QPushButton *button : m_buttonKeyMap.keys()) {
        connect(button, &QPushButton::clicked, this, &SettingsDialog::onColorButtonClicked);
    }

    // Connect the OK/Cancel buttons
    connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &SettingsDialog::saveSettings);

    loadSettings();
}

SettingsDialog::~SettingsDialog()
{
    delete ui;
}

void SettingsDialog::loadSettings()
{
    // Loop through all our mapped buttons
    for(auto it = m_buttonKeyMap.constBegin(); it != m_buttonKeyMap.constEnd(); ++it) {
        QPushButton *button = it.key();
        QString key = it.value();

        // Load the color from QSettings, using the default from the button's 'text'
        // (We will set defaults in main.cpp)
        QColor color = m_settings.value(key).value<QColor>();

        updateButtonColor(button, color);
    }
}

void SettingsDialog::saveSettings()
{
    for(auto it = m_colorButtonMap.constBegin(); it != m_colorButtonMap.constEnd(); ++it) {
        QPushButton *button = it.key();
        QColor color = it.value();
        QString key = m_buttonKeyMap.value(button);

        m_settings.setValue(key, color);
    }
}

void SettingsDialog::onColorButtonClicked()
{
    // Find out which button was clicked
    QPushButton *button = qobject_cast<QPushButton*>(sender());
    if (!button) return;

    // Get its current color
    QColor currentColor = m_colorButtonMap.value(button);

    // Open a color picker
    QColor newColor = QColorDialog::getColor(currentColor, this, "Select Color");

    if (newColor.isValid()) {
        updateButtonColor(button, newColor);
    }
}

void SettingsDialog::updateButtonColor(QPushButton *button, const QColor &color)
{
    // Store the color in our map
    m_colorButtonMap.insert(button, color);

    // Update the button's appearance to be a swatch
    button->setText(color.name());
    button->setStyleSheet(QString("background-color: %1; color: %2; border: 1px solid black;")
                              .arg(color.name())
                              .arg(color.lightness() < 128 ? "white" : "black")); // Set text to white or black
}
